data = pharmacoSmoking)
summary(model3)
AIC(model1)
AIC(model2)
AIC(model3)
test.ph <- cox.zph(model2)
print(test.ph)
plot(test.ph)
dfbeta <- residuals(model2, type="dfbeta")
par(mfrow=c(3,3))
for (j in 1:ncol(dfbeta)) {
plot(dfbeta[, j], ylab=names(coef(model2))[j])
abline(h=0, lty=2)
}
## Loading the libraries
library(asaur)
library(survival)
#Loading the data
data(pharmacoSmoking)
#Summary of the data
summary(pharmacoSmoking)
#Model 1
model1 <- coxph(Surv(ttr, relapse) ~ gender + race + employment + yearsSmoking +
levelSmoking + priorAttempts + longestNoSmoke,
data = pharmacoSmoking)
summary(model1)
#Model 2
model2 <- coxph(Surv(ttr, relapse) ~ gender + race + employment + yearsSmoking +
levelSmoking + priorAttempts + longestNoSmoke + age,
data = pharmacoSmoking)
summary(model2)
concordance(model1)
concordance(model2)
anova(model1, model2)
model3 <- coxph(Surv(ttr, relapse) ~ gender + race + employment + yearsSmoking +
levelSmoking + priorAttempts + longestNoSmoke + age + age:gender,
data = pharmacoSmoking)
summary(model3)
AIC(model1)
AIC(model2)
AIC(model3)
test.ph <- cox.zph(model2)
print(test.ph)
plot(test.ph)
dfbeta <- residuals(model2, type="dfbeta")
par(mfrow=c(3,3))
for (j in 1:ncol(dfbeta)) {
plot(dfbeta[, j], ylab=names(coef(model2))[j])
abline(h=0, lty=2)
}
my.reduced.pbc <- my.pbc[, -c(1:3)]
my.reduced.pbc <- my.pbc[, -c(1:3)]
# Load the 'survival'
library(survival)
# Load the 'pbc' dataset
data(pbc)
?pbc
summary(pbc)
my.pbc <- na.omit(pbc[, -1])
my.pbc$status <- as.factor(my.pbc$status)
my.pbc$ascites <- as.factor(my.pbc$ascites)
my.pbc$hepato <- as.factor(my.pbc$hepato)
my.pbc$stage <- as.factor(my.pbc$stage)
summary(my.pbc)
my.reduced.pbc <- my.pbc[, -c(1:3)]
summary(my.reduced.pbc)
# creating a logistic regression model loading the data into model_logistic
model_logistic <- glm(hepato ~ age + sex + albumin + alk.phos + ast + bili,
data = my.reduced.pbc,
family = binomial)
# the summary of the model
summary(model_logistic)
exp(coef(model_logistic)["bili"])
# Plot of residuals vs. fitted values
plot(fitted(model_logistic), residuals(model_logistic, type="deviance"),
xlab="Fitted values", ylab="Deviance residuals",
main="Residuals vs Fitted")
abline(h=0, lty=2)
library(ggplot2)
# Create a dataframe with the residuals
plot.data <- cbind(my.reduced.pbc, residuals = residuals(model_logistic, type = "deviance"))
# Function to create a ggplot
residual_plot <- function(data, x_var, x_lab) {
ggplot(data, aes_string(x = x_var, y = "residuals")) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
geom_smooth(method = "loess", se = FALSE, color = "blue") +
labs(
x = x_lab,
y = "Deviance Residuals",
title = paste("Residuals vs", x_lab)
) +
theme_minimal()
}
# Create plots for all variables
plot_age <- residual_plot(plot.data, "age", "Age")
plot_sex <- residual_plot(plot.data, "sex", "Sex") +
scale_x_discrete(limits = c("m", "f"))
plot_albumin <- residual_plot(plot.data, "albumin", "Albumin")
plot_alk_phos <- residual_plot(plot.data, "alk.phos", "Alkaline Phosphatase")
plot_ast <- residual_plot(plot.data, "ast", "AST")
plot_bili <- residual_plot(plot.data, "bili", "Bilirubin")
# Print each plot individually
print(plot_age)
print(plot_sex)
print(plot_albumin)
print(plot_alk_phos)
print(plot_ast)
print(plot_bili)
# Cook's distance plot
plot(cooks.distance(model_logistic), type="h",
main="Cook's Distance")
# Q-Q plot
qqnorm(residuals(model_logistic, type="deviance"))
# Generate Half-normal plot
library(faraway)
Half_normal <- halfnorm(hatvalues(model_logistic))
Half_normal
# Loading the data into my.pbc$newstatus
my.pbc$newstatus <- as.numeric(ifelse(my.pbc$status == 2, 1, 0))
## remove the original status variable from the dataset
my.pbc <- my.pbc[, -2]
# summary of the output
summary(my.pbc)
model_coxph <- coxph(Surv(time, newstatus) ~ age + sex + albumin + alk.phos + ast + bili, data = my.pbc)
# Display a summary
summary(model_coxph)
# Checking proportional hazards assumption
cox.zph(model_coxph)
# Plotting Schoenfeld residuals
plot(cox.zph(model_coxph))
# Compute DFBETA residuals for the Cox proportional hazards model
dfbeta <- residuals(model_coxph, type="dfbeta")
# Configure the plotting area to show 3 rows and 3 columns of plots
par(mfrow=c(3,3))
# Iterate through each column of DFBETAs and generate a plot for each variable
for (j in 1:ncol(dfbeta)) {
# Create a plot of the DFBETA values for the j-th variable with appropriate y-axis labeling
plot(dfbeta[, j], ylab=names(coef(model_coxph))[j])
# Draw a horizontal dashed line at y = 0 for reference
abline(h=0, lty=2)
}
## Non linearity
res <- residuals(model_coxph, type="martingale")
X <- as.matrix(my.pbc[, c("age", "albumin", "alk.phos", "ast", "bili")]) # matrix of covariates
par(mfrow=c(3, 3))
for (j in 1:5) { # residual plots
plot(X[, j], res, xlab=c("age", "albumin", "alk.phos", "ast", "bili")[j], ylab="residuals")
abline(h=0, lty=2)
lines(lowess(X[, j], res, iter=0))
}
print(plot_sex)
print(plot_albumin)
print(plot_alk_phos)
print(plot_ast)
print(plot_bili)
# Cook's distance plot
plot(cooks.distance(model_logistic), type="h",
main="Cook's Distance")
# Q-Q plot
qqnorm(residuals(model_logistic, type="deviance"))
# Generate Half-normal plot
library(faraway)
Half_normal <- halfnorm(hatvalues(model_logistic))
Half_normal
# Loading the data into my.pbc$newstatus
my.pbc$newstatus <- as.numeric(ifelse(my.pbc$status == 2, 1, 0))
# Load the 'survival'
library(survival)
# Load the 'pbc' dataset
data(pbc)
?pbc
summary(pbc)
my.pbc <- na.omit(pbc[, -1])
my.pbc$status <- as.factor(my.pbc$status)
my.pbc$ascites <- as.factor(my.pbc$ascites)
my.pbc$hepato <- as.factor(my.pbc$hepato)
my.pbc$stage <- as.factor(my.pbc$stage)
summary(my.pbc)
my.reduced.pbc <- my.pbc[, -c(1:3)]
summary(my.reduced.pbc)
# creating a logistic regression model loading the data into model_logistic
model_logistic <- glm(hepato ~ age + sex + albumin + alk.phos + ast + bili,
data = my.reduced.pbc,
family = binomial)
# the summary of the model
summary(model_logistic)
#Interpreting the odds ratios
exp(coef(model_logistic)["bili"])
# Residuals versus Fitted values
plot(fitted(model_logistic), residuals(model_logistic, type="deviance"),
xlab="Fitted Values", ylab="Deviance residuals",
main="Residuals vs Fitted")
abline(h=0, lty=2)
library(ggplot2)
plot.data <- cbind(my.reduced.pbc, residuals = residuals(model_logistic, type = "deviance"))
# Create a ggplot
residual_plot <- function(data, x_var, x_lab) {
ggplot(data, aes_string(x = x_var, y = "residuals")) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
geom_smooth(method = "loess", se = FALSE, color = "blue") +
labs(
x = x_lab,
y = "Deviance Residuals",
title = paste("Residuals vs", x_lab)
) +
theme_minimal()
}
# Creating the plots for all the variables
plot_age <- residual_plot(plot.data, "age", "Age")
plot_sex <- residual_plot(plot.data, "sex", "Sex") +
scale_x_discrete(limits = c("m", "f"))
plot_albumin <- residual_plot(plot.data, "albumin", "Albumin")
plot_alk_phos <- residual_plot(plot.data, "alk.phos", "Alkaline Phosphatase")
plot_ast <- residual_plot(plot.data, "ast", "AST")
plot_bili <- residual_plot(plot.data, "bili", "Bilirubin")
print(plot_age)
print(plot_sex)
print(plot_albumin)
print(plot_alk_phos)
print(plot_ast)
print(plot_bili)
# Cook's distance plot
plot(cooks.distance(model_logistic), type="h",
main="Cook's Distance")
# Q-Q plot
qqnorm(residuals(model_logistic, type="deviance"))
# Generate Half-normal plot
library(faraway)
Half_normal <- halfnorm(hatvalues(model_logistic))
Half_normal
# Loading the data into my.pbc$newstatus
my.pbc$newstatus <- as.numeric(ifelse(my.pbc$status == 2, 1, 0))
## remove the original status variable from the dataset
my.pbc <- my.pbc[, -2]
# summary of the output
summary(my.pbc)
model_coxph <- coxph(Surv(time, newstatus) ~ age + sex + albumin + alk.phos + ast + bili, data = my.pbc)
# Display a summary
summary(model_coxph)
# Checking proportional hazards assumption
cox.zph(model_coxph)
# Plotting Schoenfeld residuals
plot(cox.zph(model_coxph))
# Compute DFBETA residuals for the Cox proportional hazards model
dfbeta <- residuals(model_coxph, type="dfbeta")
# Configure the plotting area to show 3 rows and 3 columns of plots
par(mfrow=c(3,3))
# Iterate through each column of DFBETAs and generate a plot for each variable
for (j in 1:ncol(dfbeta)) {
# Create a plot of the DFBETA values for the j-th variable with appropriate y-axis labeling
plot(dfbeta[, j], ylab=names(coef(model_coxph))[j])
# Draw a horizontal dashed line at y = 0 for reference
abline(h=0, lty=2)
}
## Non linearity
res <- residuals(model_coxph, type="martingale")
X <- as.matrix(my.pbc[, c("age", "albumin", "alk.phos", "ast", "bili")]) # matrix of covariates
par(mfrow=c(3, 3))
for (j in 1:5) { # residual plots
plot(X[, j], res, xlab=c("age", "albumin", "alk.phos", "ast", "bili")[j], ylab="residuals")
abline(h=0, lty=2)
lines(lowess(X[, j], res, iter=0))
}
res <- residuals(model_coxph, type="martingale")
X <- as.matrix(my.pbc[, c("age", "albumin", "alk.phos", "ast", "bili")])
par(mfrow=c(3, 3))
for (j in 1:5) {
plot(X[, j], res, xlab=c("age", "albumin", "alk.phos", "ast", "bili")[j], ylab="residuals")
abline(h=0, lty=2)
lines(lowess(X[, j], res, iter=0))
}
# Load the 'survival'
library(survival)
# Load the 'pbc' dataset
data(pbc)
?pbc
summary(pbc)
my.pbc <- na.omit(pbc[, -1])
my.pbc$status <- as.factor(my.pbc$status)
my.pbc$ascites <- as.factor(my.pbc$ascites)
my.pbc$hepato <- as.factor(my.pbc$hepato)
my.pbc$stage <- as.factor(my.pbc$stage)
summary(my.pbc)
my.reduced.pbc <- my.pbc[, -c(1:3)]
summary(my.reduced.pbc)
# creating a logistic regression model loading the data into model_logistic
model_logistic <- glm(hepato ~ age + sex + albumin + alk.phos + ast + bili,
data = my.reduced.pbc,
family = binomial)
# the summary of the model
summary(model_logistic)
#Interpreting the odds ratios
exp(coef(model_logistic)["bili"])
# Residuals versus Fitted value Plots
plot(fitted(model_logistic), residuals(model_logistic, type="deviance"),
xlab="Fitted Values", ylab="Deviance residuals",
main="Residuals vs Fitted")
abline(h=0, lty=2)
library(ggplot2)
plot.data <- cbind(my.reduced.pbc, residuals = residuals(model_logistic, type = "deviance"))
# Create a ggplot
residual_plot <- function(data, x_var, x_lab) {
ggplot(data, aes_string(x = x_var, y = "residuals")) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
geom_smooth(method = "loess", se = FALSE, color = "blue") +
labs(
x = x_lab,
y = "Deviance Residuals",
title = paste("Residuals vs", x_lab)
) +
theme_minimal()
}
# Plots for all the variables
plot_age <- residual_plot(plot.data, "age", "Age")
plot_sex <- residual_plot(plot.data, "sex", "Sex") +
scale_x_discrete(limits = c("m", "f"))
plot_albumin <- residual_plot(plot.data, "albumin", "Albumin")
plot_alk_phos <- residual_plot(plot.data, "alk.phos", "Alkaline Phosphatase")
plot_ast <- residual_plot(plot.data, "ast", "AST")
plot_bili <- residual_plot(plot.data, "bili", "Bilirubin")
print(plot_age)
print(plot_sex)
print(plot_albumin)
print(plot_alk_phos)
print(plot_ast)
print(plot_bili)
# Cook's distance
plot(cooks.distance(model_logistic), type="h",
main="Cook's Distance Plot")
# Q-Q plotting
qqnorm(residuals(model_logistic, type="deviance"))
#Half-normal plot
library(faraway)#Loading faraway package
Half_normal <- halfnorm(hatvalues(model_logistic))
Half_normal
# my.pbc$newstatus
my.pbc$newstatus <- as.numeric(ifelse(my.pbc$status == 2, 1, 0))
my.pbc <- my.pbc[, -2]
# Summary
summary(my.pbc)
model_coxph <- coxph(Surv(time, newstatus) ~ age + sex + albumin + alk.phos + ast + bili, data = my.pbc)
# Summary
summary(model_coxph)
# CoxPH modeling
cox.zph(model_coxph)
plot(cox.zph(model_coxph))
dfbeta <- residuals(model_coxph, type="dfbeta")
# PLotting in 3 row and 3 column
par(mfrow=c(3,3))
for (j in 1:ncol(dfbeta)) {
plot(dfbeta[, j], ylab=names(coef(model_coxph))[j])
abline(h=0, lty=2)
}
res <- residuals(model_coxph, type="martingale")
X <- as.matrix(my.pbc[, c("age", "albumin", "alk.phos", "ast", "bili")])
par(mfrow=c(3, 3))
for (j in 1:5) {
plot(X[, j], res, xlab=c("age", "albumin", "alk.phos", "ast", "bili")[j], ylab="residuals")
abline(h=0, lty=2)
lines(lowess(X[, j], res, iter=0))
}
library(survival)
data(pbc)
?pbc
summary(pbc)
my.pbc <- na.omit(pbc[, -1])
my.pbc$status <- as.factor(my.pbc$status)
my.pbc$ascites <- as.factor(my.pbc$ascites)
my.pbc$hepato <- as.factor(my.pbc$hepato)
my.pbc$stage <- as.factor(my.pbc$stage)
summary(my.pbc)
my.reduced.pbc <- my.pbc[, -c(1:3)]
summary(my.reduced.pbc)
# Logistic model
model_logistic <- glm(hepato ~ age + sex + albumin + alk.phos + ast + bili,
data = my.reduced.pbc,
family = binomial)
# summary
summary(model_logistic)
#Interpreting the odds ratios
exp(coef(model_logistic)["bili"])
# Residuals versus Fitted value Plots
plot(fitted(model_logistic), residuals(model_logistic, type="deviance"),
xlab="Fitted Values", ylab="Deviance residuals",
main="Residuals vs Fitted")
abline(h=0, lty=2)
library(ggplot2)
plot.data <- cbind(my.reduced.pbc, residuals = residuals(model_logistic, type = "deviance"))
# Create a ggplot
residual_plot <- function(data, x_var, x_lab) {
ggplot(data, aes_string(x = x_var, y = "residuals")) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
geom_smooth(method = "loess", se = FALSE, color = "blue") +
labs(
x = x_lab,
y = "Deviance Residuals",
title = paste("Residuals vs", x_lab)
) +
theme_minimal()
}
# Plots for all the variables
plot_age <- residual_plot(plot.data, "age", "Age")
plot_sex <- residual_plot(plot.data, "sex", "Sex") +
scale_x_discrete(limits = c("m", "f"))
plot_albumin <- residual_plot(plot.data, "albumin", "Albumin")
plot_alk_phos <- residual_plot(plot.data, "alk.phos", "Alkaline Phosphatase")
plot_ast <- residual_plot(plot.data, "ast", "AST")
plot_bili <- residual_plot(plot.data, "bili", "Bilirubin")
print(plot_age)
print(plot_sex)
print(plot_albumin)
print(plot_alk_phos)
print(plot_ast)
print(plot_bili)
# Cook's distance
plot(cooks.distance(model_logistic), type="h",
main="Cook's Distance Plot")
# Q-Q plotting
qqnorm(residuals(model_logistic, type="deviance"))
#Half-normal plot
library(faraway)#Loading faraway package
Half_normal <- halfnorm(hatvalues(model_logistic))
Half_normal
# my.pbc$newstatus
my.pbc$newstatus <- as.numeric(ifelse(my.pbc$status == 2, 1, 0))
my.pbc <- my.pbc[, -2]
# Summary
summary(my.pbc)
model_coxph <- coxph(Surv(time, newstatus) ~ age + sex + albumin + alk.phos + ast + bili, data = my.pbc)
# Summary
summary(model_coxph)
# CoxPH modeling
cox.zph(model_coxph)
plot(cox.zph(model_coxph))
dfbeta <- residuals(model_coxph, type="dfbeta")
# PLotting in 3 row and 3 column
par(mfrow=c(3,3))
for (j in 1:ncol(dfbeta)) {
plot(dfbeta[, j], ylab=names(coef(model_coxph))[j])
abline(h=0, lty=2)
}
res <- residuals(model_coxph, type="martingale")
X <- as.matrix(my.pbc[, c("age", "albumin", "alk.phos", "ast", "bili")])
par(mfrow=c(3, 3))
for (j in 1:5) {
plot(X[, j], res, xlab=c("age", "albumin", "alk.phos", "ast", "bili")[j], ylab="residuals")
abline(h=0, lty=2)
lines(lowess(X[, j], res, iter=0))
}
# installing necessary packages
install.packages("geosphere")
```
#loading necessary package
library(geosphere)
df <- read.csv("C:/Users/drmur/Downloads/clinics.csv", sep="|", stringsAsFactors=FALSE)
head(df)
# Convert lat/long columns to numeric
df$locLat <- as.numeric(df$locLat)
df$locLong <- as.numeric(df$locLong)
# Remove rows with missing coordinates
df <- df[!is.na(df$locLat) & !is.na(df$locLong), ]
# Step 2 - Defining haversine fuction in R
haversine <- function(lat1, lon1, lat2, lon2) {
R <- 6371  # Earth radius in km
lat1 <- lat1 * pi / 180
lon1 <- lon1 * pi / 180
lat2 <- lat2 * pi / 180
lon2 <- lon2 * pi / 180
dlat <- lat2 - lat1
dlon <- lon2 - lon1
a <- sin(dlat/2)^2 + cos(lat1) * cos(lat2) * sin(dlon/2)^2
c <- 2 * atan2(sqrt(a), sqrt(1-a))
return(R * c)
}
# Step 3 - Compute Distance Using Three Approaches
# Using a For-Loop (iterrows() equivalent)
start_time <- Sys.time()
distances <- numeric(nrow(df))
for (i in 1:nrow(df)) {
distances[i] <- haversine(40.671, -73.985, df$locLat[i], df$locLong[i])
}
df$distance <- distances
execution_time_for_loop <- Sys.time() - start_time
print(paste("For-loop execution time:", execution_time_for_loop))
# Using apply()
start_time <- Sys.time()
df$distance <- apply(df, 1, function(row)
haversine(40.671, -73.985, as.numeric(row["locLat"]), as.numeric(row["locLong"]))
)
execution_time_apply <- Sys.time() - start_time
print(paste("Apply execution time:", execution_time_apply))
#Using mapply()
start_time <- Sys.time()
df$distance <- mapply(haversine, 40.671, -73.985, df$locLat, df$locLong)
execution_time_vectorized <- Sys.time() - start_time
print(paste("Vectorized execution time:", execution_time_vectorized))
```
#Using mapply()
start_time <- Sys.time()
df$distance <- mapply(haversine, 40.671, -73.985, df$locLat, df$locLong)
execution_time_vectorized <- Sys.time() - start_time
print(paste("Vectorized execution time:", execution_time_vectorized))
# Step 4: Tabulate Execution Times
execution_times <- data.frame(
Approach = c("For-loop", "Apply (row-wise)", "Vectorized (mapply)"),
Execution_Time_s = c(execution_time_for_loop, execution_time_apply, execution_time_vectorized)
)
print(execution_times)
